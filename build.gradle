/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript { final scriptHandler ->

    apply from: 'version.gradle'
    apply from: "$rootDir/config/gradle/dependencies.gradle"

    defaultRepositories(scriptHandler)
    dependencies {
        classpath deps.build.gradlePlugins.errorProne
    }
    forceConfiguration(scriptHandler)
}

ext {
    credentialsPropertyFile = 'cloudrepo.properties'
    publishPlugin = "$rootDir/config/gradle/publish.gradle"
    projectsToPublish = ["plugin"]
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'idea'

    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'pmd'

    group = 'io.spine.tools'
    version = spineVersion

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    defaultRepositories(project)

    dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac
        implementation deps.build.checkerAnnotations
        implementation deps.build.errorProneAnnotations

        implementation deps.build.guava

        implementation "io.spine:spine-base:$spineVersion"

        testImplementation deps.test.guavaTestlib
        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
        testImplementation deps.test.truth
        testImplementation deps.test.junitPioneer
    }

    forceConfiguration(project)

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'

            excludeTags 'functional'
        }
    }

    task functionalTest(type: Test) {
        useJUnitPlatform {
            includeTags 'functional' // See io.spine.tools.bootstrap.func.Functional
        }
        mustRunAfter test
    }

    check.dependsOn functionalTest

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set("sources")
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        archiveClassifier.set("test")
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from "$projectDir/build/docs/javadoc"
        archiveClassifier.set("javadoc")
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    apply from: deps.scripts.pmd
}

apply from: deps.scripts.publish

rootProject.afterEvaluate {
    final Project pluginProject = project(':plugin')
    pluginProject.publish.dependsOn(pluginProject.publishPlugins)
}

apply from: deps.scripts.jacoco
