/*
 * Copyright 2020, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

project.gradlePlugin {
    it.plugins {
        spineBootstrapPlugin {
            id = 'io.spine.tools.gradle.bootstrap'
            implementationClass = 'io.spine.tools.gradle.bootstrap.BootstrapPlugin'
            displayName = 'Spine Bootstrap'
            description = 'Prepares a Gradle project for development on Spine.'
        }
    }
}

project.pluginBundle {
    website = 'https://spine.io/'
    vcsUrl = 'https://github.com/SpineEventEngine/bootstrap.git'
    tags = ['spine', 'event-sourcing', 'ddd', 'cqrs', 'bootstrap']

    it.mavenCoordinates {
        groupId = 'io.spine.tools'
        artifactId = 'spine-bootstrap'
        version = project.spineVersion
    }

    it.withDependencies { it.clear() }

    it.plugins {
        spineBootstrapPlugin {
            version = project.spineVersion
        }
    }
}

/*
 * In order to simplify the Bootstrap plugin usage, the plugin should have no external dependencies
 * which cannot be found in the Plugin portal or in JCenter. Spine core modules are not published to
 * either of those repositories. Thus, we publish the "fat" JAR.
 * 
 * As Gradle Plugin plugin always publishes the JAR artifact with the empty classifier, we add 
 * the "pure" classifier to the default JAR artifact and generate the "fat" JAR with an empty 
 * classifier.
 */

project.jar {
    archiveClassifier.set 'pure'
    it.dependsOn project.shadowJar
}

project.shadowJar {
    classifier = ''
}

artifacts {
    archives shadowJar
}
