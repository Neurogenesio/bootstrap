/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.10.1'
}

Dependency spineProtocPluginDependency = null

/*
 * Creates a configuration named `fetch`.
 *
 * The configuration is used in order to download artifacts. The artifacts are NOT added into
 * the application classpath.
 */
configurations { fetch }

dependencies {
    implementation "io.spine.tools:spine-plugin-base:$spineVersion"
    implementation "io.spine.tools:spine-model-compiler:$spineVersion"
    implementation "io.spine.tools:spine-proto-js-plugin:$spineVersion"
    implementation deps.build.gradlePlugins.protobuf
    
    testImplementation "io.spine:spine-testlib:$spineVersion"
    testImplementation "io.spine.tools:spine-plugin-testlib:$spineVersion"

    spineProtocPluginDependency = fetch("io.spine.tools:spine-protoc-plugin:${spineVersion}@jar")
}

final File spineArtifactDir = file("$projectDir/.spine")

task('downloadProtocPlugin') {
    description = 'Downloads the Spine Protoc plugin for functional tests.'
    
    doLast {
        final File executableJar = configurations.fetch
                .fileCollection(spineProtocPluginDependency)
                .getSingleFile()
        spineArtifactDir.mkdirs()
        copy {
            from executableJar
            into spineArtifactDir
        }
    }

    mustRunAfter clean
    functionalTest.dependsOn it
}

clean {
    delete += spineArtifactDir
}

gradlePlugin {
    it.plugins {
        spineBootstrapPlugin {
            id = 'io.spine.bootstrap'
            implementationClass = 'io.spine.tools.bootstrap.BootstrapPlugin'
            displayName = 'Spine Bootstrap'
            description = 'Prepares a Gradle project for development on Spine.'
        }
    }
}

pluginBundle {
    website = 'https://spine.io/'
    vcsUrl = 'https://github.com/SpineEventEngine/bootstrap.git'
    tags = ['java', 'spine', 'event-sourcing', 'bootstrap', 'quick-start']
}

final File depsDir = "$buildDir/deps" as File
sourceSets.main.resources.srcDir(depsDir)

task('writeDependencies') {
    final File versionFile = "$rootDir/version.gradle" as File
    final File depsFile = "$rootDir/config/gradle/dependencies.gradle" as File

    inputs.file(versionFile)
    inputs.file(depsFile)

    outputs.dir(depsDir)

    doLast {
        depsDir.mkdirs()
        copy {
            from versionFile
            into depsDir
        }
    }

    doLast {
        depsDir.mkdirs()
        copy {
            from depsFile
            into depsDir
        }
    }
}

processResources.dependsOn writeDependencies
